{"version":3,"sources":["app/lib/view_html.coffee"],"names":[],"mappings":"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","file":"public\\javascripts\\tweak.view.html.js","sourcesContent":["###\r\n  tweak.view.html.js 1.3.0\r\n\r\n  (c) 2014 Blake Newman.\r\n  TweakJS may be freely distributed under the MIT license.\r\n  For all details and documentation:\r\n  http://tweakjs.com\r\n###\r\n\r\ntweak.Viewable =\r\n  width: window.innerWidth or (document.documentElement or document.documentElement.getElementsByTagName('body')[0]).clientWidth\r\n  height: window.innerHeight or (document.documentElement or document.documentElement.getElementsByTagName('body')[0]).clientHeight\r\n\r\n###\r\n  This class extends the View class, extending its rendering functionality for HTML.\r\n  The ViewHTML class does not provide functionality to manipulate this Views\r\n  presentation layer. To extend the HTMLView to provide extra functionality to\r\n  manipulate this View's rendered interface (DOM) please include the optional\r\n  tweak.ViewHTMLAdvanced class.\r\n\r\n  Examples are in JS, unless where CoffeeScript syntax may be unusual. Examples\r\n  are not exact, and will not directly represent valid code; the aim of an example\r\n  is to show how to roughly use a method.\r\n###\r\nclass tweak.ViewHTML extends tweak.View\r\n  # @property [Method] see tweak.Common.require\r\n  require: tweak.Common.require\r\n  # @property [Method] see tweak.Common.splitMultiName\r\n  splitMultiName: tweak.Common.splitMultiName\r\n  # @property [Method] see tweak.Common.relToAbs\r\n  relToAbs: tweak.Common.relToAbs\r\n  # @property [Method] see tweak.Common.findModule\r\n  findModule: tweak.Common.findModule\r\n\r\n  ###\r\n    Default initialiser function - called when the View has rendered\r\n  ###\r\n  init: ->\r\n\r\n  ###\r\n    Renders the View, using a html template engine. The View is loaded asynchronously, this prevents the DOM from\r\n    from congesting during rendering. The View won't be rendered until its parent View is rendered and any other\r\n    components Views that are waiting to be rendered; this makes sure that components are rendered into in there\r\n    correct positions.\r\n    \r\n    @param [Boolean] silent (Optional, default = false) If true events are not triggered upon any changes.\r\n    @event rendered The event is called when the View has been rendered.\r\n  ###\r\n  render: (silent) ->\r\n    if @isRendered() and not silent\r\n      @triggerEvent 'rendered'\r\n      return\r\n      \r\n    if not @model? then throw new Error 'No model attached to View'\r\n    config = @config\r\n    config.attach ?= {}\r\n\r\n    @name = @component.name or @config.name or @uid\r\n    \r\n    # Makes sure that there is an id for this component set, either by the config or by its name\r\n    classNames = for name in @component.names then name.replace /[\\/\\\\]/g, '-'\r\n\r\n    # Build the template with the date from the model\r\n    template = if config.template then @require @name, config.template else @findModule @component.paths, './template'\r\n    template = template @model.data\r\n    \r\n    # Create HTML element add add to DOM\r\n    rendered = (template) =>\r\n      # Attach template to the DOM and set @el\r\n      attachTo = @config.attach?.to or @config.attach?.name or @name\r\n      parent = @component.parent?.view?.el\r\n      html = document.documentElement\r\n      attachment = if attachTo.tagName then attachTo\r\n      else @getAttachmentNode(parent) or @getAttachmentNode(html) or parent or html\r\n      \r\n      @el = @attach attachment, template, config.attach.method\r\n        \r\n      # Attempt to add class and uid\r\n      strip = /^\\s+|\\s\\s+|\\s+$/\r\n      @addClass @el, classNames.join ' '\r\n      @addID @el, @uid\r\n\r\n      if not silent then @triggerEvent 'rendered'\r\n      @init()\r\n\r\n    @createAsync template, rendered\r\n    return\r\n\r\n  ###\r\n    Get the children nodes of an element.\r\n    @param [DOMElement] parent The element to retrieve the children of\r\n    @param [Boolean] recursive (Default: true) Whether to recursively go through its children's children to get a full list\r\n    @return [Array<DOMElement>] Returns an array of children nodes inside an element\r\n  ###\r\n  getChildren: (element, recursive = true) ->\r\n    result = []\r\n    children = (node = {}) ->\r\n      nodes = node.children or []\r\n      for node in nodes\r\n        result.push node\r\n      for node in nodes\r\n        if recursive and node.children then children node\r\n      return\r\n    # Iterate though all children of an element\r\n    children element\r\n    result\r\n\r\n  ###\r\n    Clears the View and removed event listeners of DOM elements.\r\n  ###\r\n  clear: (element = @el) ->\r\n    if element?.parentNode\r\n      try\r\n        element.parentNode.removeChild element\r\n        element = null\r\n    return\r\n\r\n  ###\r\n    Checks to see if the item is rendered; this is determined if the node has a parentNode.\r\n    @return [Boolean] Returns whether the View has been rendered.\r\n  ###\r\n  isRendered: -> if document.documentElement.contains @el then true else false\r\n  \r\n  ###\r\n    Get the attachment node for this element.\r\n    @param [DOMElement] parent the DOM Element to search in\r\n    @return [DOMElement] Returns the parent DOMElement.\r\n  ###\r\n  getAttachmentNode: (parent) ->\r\n    if not parent then return\r\n    # The result is the parent el, or it will try to find a node to attach to in the DOM\r\n    name = @config.attach?.to or @name\r\n    nodes = @getChildren parent\r\n    nodes.unshift parent\r\n    for prop in nodes\r\n      if child then break\r\n      attachment = prop.getAttribute 'data-attach'\r\n      if attachment? and not attachment.match /\\s+/\r\n        for val in @splitMultiName @component.parent.name or '', attachment\r\n          if name is val\r\n            child = prop\r\n            break\r\n    child\r\n\r\n  ###\r\n    Attach a DOMElement to another DOMElement. Attachment can happen by three methods, inserting before, inserting after, inserting at position and replacing.\r\n\r\n    @param [DOMElement] parent DOMElement to attach to.\r\n    @param [DOMElement] node DOMElement to attach to parent.\r\n    @param [String, Number] method (Default = append) The method to attach ('prefix'/'before', 'replace', (number) = insert at position) any other method will use the attach method to insert after.\r\n  ###\r\n  attach: (parent, node, method) ->\r\n    switch method\r\n      when 'prefix', 'before'\r\n        parent.insertBefore node, parent.firstChild\r\n        return parent.firstElementChild\r\n      when 'replace'\r\n        for item in parent.children\r\n          try\r\n            parent.removeChild item\r\n          catch e\r\n        parent.appendChild node\r\n        return parent.firstElementChild\r\n      else\r\n        if /^\\d+$/.test \"#{method}\"\r\n          num = Number(method)\r\n          parent.insertBefore node, parent.children[num]\r\n          return parent.children[num]\r\n        else\r\n          parent.appendChild node\r\n          return parent.lastElementChild\r\n\r\n  ###\r\n    Create an Element from a template string.\r\n    \r\n    @param [String] template A template String to parse to a DOMElement.\r\n    @return [DOMElement] Parsed DOMElement.\r\n  ###\r\n  create: (template) ->\r\n    temp = document.createElement 'div'\r\n    frag = document.createDocumentFragment()\r\n    temp.innerHTML = template\r\n    temp.firstChild\r\n\r\n  ###\r\n    Asynchronously create an Element from a template string.\r\n    \r\n    @param [String] template A template String to parse to a DOMElement.\r\n    @return [DOMElement] Parsed DOMElement.\r\n  ###\r\n  createAsync: (template, callback) -> setTimeout => callback @create template, 0\r\n\r\n  ###\r\n    Select a DOMElement using a selector engine dependency affixed to the tweak.Selector object.\r\n    @param [String, DOMElement] element A DOMElement or a string representing a selector query if using a selector engine.\r\n    @param [DOMElement] root (Default = @el) The element root to search for elements with a selector engine.\r\n    @return [Array<DOMElement>] An array of DOMElements.\r\n\r\n    @throw When trying to use a selector engine without having one assigned to the tweak.Selector property you will\r\n    receive the following error - \"No selector engine defined to tweak.Selector\"\r\n  ###\r\n  element: (element, root = @el) ->\r\n    if typeof element is 'string'\r\n      if tweak.Selector\r\n        tweak.Selector element, root\r\n      else throw new Error 'No selector engine defined to tweak.Selector'\r\n    else [element]\r\n\r\n  ###\r\n    Apply event listener to element(s).\r\n    @param [String, DOMElement] element A DOMElement or a string representing a selector query if using a selector engine.\r\n    @param [String] type The type of event.\r\n    @param [Function] callback The method to add to the events callbacks.\r\n    @param [Boolean] capture (Default = false) After initiating capture, all events of\r\n      the specified type will be dispatched to the registered listener before being\r\n      dispatched to any EventTarget beneath it in the DOM tree. Events which are bubbling\r\n      upward through the tree will not trigger a listener designated to use capture. If\r\n      a listener was registered twice, one with capture and one without, each must be\r\n      removed separately. Removal of a capturing listener does not affect a non-capturing\r\n      version of the same listener, and vice versa.\r\n  ###\r\n  on: (element, params...) ->\r\n    elements = @element element or @el\r\n    tweak.Common.on item, params... for item in elements\r\n    return\r\n\r\n  ###\r\n    Remove event listener to element(s).\r\n    @param [String, DOMElement] element A DOMElement or a string representing a selector query if using a selector engine.\r\n    @param [String] type The type of event.\r\n    @param [Function] callback The method to remove from the events callbacks\r\n    @param [Boolean] capture (Default = false) Specifies whether the EventListener being\r\n      removed was registered as a capturing listener or not. If a listener was registered\r\n      twice, one with capture and one without, each must be removed separately. Removal of\r\n      a capturing listener does not affect a non-capturing version of the same listener,\r\n      and vice versa.\r\n  ###\r\n  off: (element, params...) ->\r\n    elements = @element element or @el\r\n    tweak.Common.off item, params... for item in elements\r\n    return\r\n\r\n  ###\r\n    Trigger event listener on element(s).\r\n    @param [String, DOMElement] element A DOMElement or a string representing a selector query if using a selector engine.\r\n    @param [Event, String] event Event to trigger or string if to create new event.\r\n  ###\r\n  trigger: (element, event) ->\r\n    elements = @element element or @el\r\n    tweak.Common.trigger item, event for item in elements\r\n    return\r\n\r\n  ###\r\n    Returns height of an element.\r\n    @param [String, DOMElement] element A DOMElement or a string representing a selector query if using a selector engine.\r\n    @return [Number] Returns the of height an element.\r\n  ###\r\n  height: (element) -> @element(element)[0].offsetHeight\r\n\r\n  ###\r\n    Returns inside height of an element.\r\n    @param [String, DOMElement] element A DOMElement or a string representing a selector query if using a selector engine.\r\n    @return [Number] Returns the of inside height an element.\r\n  ###\r\n  insideHeight: (element) -> @element(element)[0].clientHeight\r\n\r\n  ###\r\n    Returns width of an element.\r\n    @param [String, DOMElement] element A DOMElement or a string representing a selector query if using a selector engine.\r\n    @return [Number] Returns the of width an element.\r\n  ###\r\n  width: (element) -> @element(element)[0].offsetWidth\r\n\r\n  ###\r\n    Returns inside width of an element.\r\n    @param [String, DOMElement] element A DOMElement or a string representing a selector query if using a selector engine.\r\n    @return [Number] Returns the of inside width an element.\r\n  ###\r\n  insideWidth: (element) -> @element(element)[0].clientWidth\r\n\r\n  ###\r\n    Returns the offset from another element relative to another (or default to the body).\r\n    @param [String, DOMElement] element A DOMElement or a string representing a selector query if using a selector engine.\r\n    @param [String] from (default = \"top\") The direction to compare the offset.\r\n    @param [String, DOMElement] relativeTo (default = document.getElementsByTagName(\"html\")[0]) A DOMElement or a string representing a selector query if using a selector engine\r\n    @return [Number] Returns the element offset value relative to another element.\r\n  ###\r\n  offsetFrom: (element, from = 'top', relativeTo) ->\r\n    relativeTo ?= document.getElementsByTagName('html')[0]\r\n    relativeTo = @element(relativeTo)[0]\r\n    element = @element(element)[0]\r\n    elementBounds = element.getBoundingClientRect()\r\n    relativeBounds = relativeTo.getBoundingClientRect()\r\n    elementBounds[from] - relativeBounds[from]\r\n  \r\n  ###\r\n    Returns the top offset of an element relative to another element (or default to the body).\r\n    @param [String, DOMElement] element A DOMElement or a string representing a selector query if using a selector engine.\r\n    @param [String, DOMElement] relativeTo (default = document.getElementsByTagName(\"html\")[0]) A DOMElement or a string representing a selector query if using a selector engine.\r\n    @return [Number] Returns the top offset of an element relative to another element (or default to the body).\r\n  ###\r\n  offsetTop: (element, relativeTo) -> @offsetFrom element, 'top', relativeTo\r\n\r\n  ###\r\n    Returns the bottom offset of an element relative to another element (or default to the body).\r\n    @param [String, DOMElement] element A DOMElement or a string representing a selector query if using a selector engine.\r\n    @param [String, DOMElement] relativeTo (default = document.getElementsByTagName(\"html\")[0]) A DOMElement or a string representing a selector query if using a selector engine.\r\n    @return [Number] Returns the bottom offset of an element relative to another element (or default to the body).\r\n  ###\r\n  offsetBottom: (element, relativeTo) -> @offsetFrom element, 'bottom', relativeTo\r\n  \r\n  ###\r\n    Returns the left offset of an element relative to another element (or default to the body).\r\n    @param [String, DOMElement] element A DOMElement or a string representing a selector query if using a selector engine.\r\n    @param [String, DOMElement] relativeTo (default = document.getElementsByTagName(\"html\")[0]) A DOMElement or a string representing a selector query if using a selector engine.\r\n    @return [Number] Returns the left offset of an element relative to another element (or default to the body).\r\n  ###\r\n  offsetLeft: (element, relativeTo) -> @offsetFrom element, 'left', relativeTo\r\n  \r\n  ###\r\n    Returns the right offset of an element relative to another element (or default to the body).\r\n    @param [String, DOMElement] element A DOMElement or a string representing a selector query if using a selector engine.\r\n    @param [String, DOMElement] relativeTo (default = window.document.body) A DOMElement or a string representing a selector query if using a selector engine.\r\n    @return [Number] Returns the right offset of an element relative to another element (or default to the body).\r\n  ###\r\n  offsetRight: (element, relativeTo) -> @offsetFrom element, 'right', relativeTo\r\n\r\n  ###\r\n    @private\r\n    Check if a elements attribute contains a string.\r\n    @param [DOMElement, String] element A DOMElement or a string representing a selector query if using a selector engine.\r\n    @param [String] attribute A DOMElement attribute to check.\r\n    @param [String] classes A string to check existance.\r\n  ###\r\n  hasInAttribute: (element, attribute, item) ->\r\n    if (\" #{@element(element)[0][attribute]} \").indexOf(\" #{item} \") is -1 then return false\r\n    true\r\n\r\n  ###\r\n    Adjust an elements attribute by removing or adding to it.\r\n    @param [String, DOMElement] element A DOMElement or a string representing a selector query if using a selector engine.\r\n    @param [String] attribute A DOMElement attribute to adjust.\r\n    @param [String] method The method of adjustment; add, remove and replace.\r\n    @param [String] classes A string of names to adjust from the attribute of the element(s).\r\n    @param [String] replacement (Optional) A string to pass as the replacement.\r\n  ###\r\n  adjust: (element, attribute, method, classes, replacement) ->\r\n    elements = @element element\r\n    if elements.length is 0 then return\r\n    classes = (classes or '').split /\\s+/\r\n    if replacements? then replacements = replacements.split /\\s+/\r\n    for item in elements\r\n      if not item? then continue\r\n      name = item[attribute]\r\n      i = 0\r\n      for prop in classes\r\n        if method is 'add'\r\n          if not @hasInAttribute item, attribute, prop then name += \" #{prop}\"\r\n        else\r\n          if prop is ' ' then continue\r\n          if method is 'remove'\r\n            name = (\" #{name} \").split(\" #{prop} \").join ' '\r\n          else\r\n            name = if not @hasInAttribute item, attribute, replacement then (\" #{name} \").split(\" #{prop} \").join \" #{replacement} \"\r\n            else (\" #{name} \").split(\" #{prop} \").join ' '\r\n        item[attribute] = name\r\n          .replace /\\s{2,}/g,' '\r\n          .replace /(^\\s*|\\s*$)/g,''\r\n    return\r\n\r\n  ###\r\n    Add a string of class names to the given element(s).\r\n    @param [String, DOMElement] element A DOMElement or a string representing a selector query if using a selector engine.\r\n    @param [String] classes A string of classes to add to the element(s).\r\n  ###\r\n  addClass: (element, classes = '') ->\r\n    @adjust element, 'className', 'add', classes\r\n    return\r\n\r\n  ###\r\n    Remove a string of class names of the given element(s).\r\n    @param [String, DOMElement] element A DOMElement or a string representing a selector query if using a selector engine.\r\n    @param [String] classes A string of classes to remove to the element(s).\r\n  ###\r\n  removeClass: (element, classes = '') ->\r\n    @adjust element, 'className', 'remove', classes\r\n    return\r\n \r\n  ###\r\n    Check of a string of class names is in then given element(s) className attribute.\r\n    @param [String, DOMElement] element A DOMElement or a string representing a selector query if using a selector engine.\r\n    @param [String] classes A string of classes to remove from the element(s).\r\n  ###\r\n  hasClass: (element, name) ->\r\n    elements = @element element\r\n    if elements.length is 0 then return\r\n    for item in elements\r\n      if not item? then continue\r\n      if not @hasInAttribute element, 'className', name then return false\r\n    true\r\n\r\n  ###\r\n    Replace class name values in the given element(s).\r\n    @param [String, DOMElement] element A DOMElement or a string representing a selector query if using a selector engine.\r\n    @param [String] classes A string of classes to replace.\r\n    @param [String] replacement The replacement string.\r\n  ###\r\n  replaceClass: (element, classes, replacement) ->\r\n    @adjust element, 'className', 'replace', classes, replacement\r\n    return\r\n\r\n  ###\r\n    Add a string of ids to add to given element(s).\r\n    @param [String, DOMElement] element A DOMElement or a string representing a selector query if using a selector engine.\r\n    @param [String] classes A string of ids to add to the given element(s).\r\n  ###\r\n  addID: (element, ids = '') ->\r\n    @adjust element, 'id', 'add', ids\r\n    return\r\n\r\n  ###\r\n    Remove a string of ids from the given element(s).\r\n    @param [String, DOMElement] element A DOMElement or a string representing a selector query if using a selector engine.\r\n    @param [String] ids A string of ids to remove from the element(s).\r\n  ###\r\n  removeID: (element, ids = '') ->\r\n    @adjust element, 'id', 'remove', ids\r\n    return\r\n \r\n  ###\r\n    Check of a string of class names is in given element(s) id attribute.\r\n    @param [String, DOMElement] element A DOMElement or a string representing a selector query if using a selector engine.\r\n    @param [String] ids A string of ids to check exists in the given element(s).\r\n  ###\r\n  hasID: (element, name) ->\r\n    elements = @element element\r\n    if elements.length is 0 then return\r\n    for item in elements\r\n      if not item? then continue\r\n      if not @hasInAttribute element, 'id', name then return false\r\n    true\r\n\r\n  ###\r\n    Replace id values in the given element(s).\r\n    @param [String, DOMElement] element A DOMElement or a string representing a selector query if using a selector engine.\r\n    @param [String] ids A string of ids to replace.\r\n    @param [String] replacement The replacement string.\r\n  ###\r\n  replaceID: (element, ids, replacement) ->\r\n    @adjust element, 'id', 'replace', ids, replacement\r\n    return\r\n  \r\ntweak.View = tweak.ViewHTML"]}